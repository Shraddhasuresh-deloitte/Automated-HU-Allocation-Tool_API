{
	"info": {
		"_postman_id": "0bea14d2-72a4-4a74-b078-4b0d0a4ddb6d",
		"name": "HUAllocation",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Product",
			"item": [
				{
					"name": "Get all product detail",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://huallocation-backend-urtjok3rza-wl.a.run.app/HUAllocation/product-detail",
							"protocol": "https",
							"host": [
								"huallocation-backend-urtjok3rza-wl",
								"a",
								"run",
								"app"
							],
							"path": [
								"HUAllocation",
								"product-detail"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get preference of a linker by email",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://huallocation-backend-urtjok3rza-wl.a.run.app/HUAllocation/product-pref",
							"protocol": "https",
							"host": [
								"huallocation-backend-urtjok3rza-wl",
								"a",
								"run",
								"app"
							],
							"path": [
								"HUAllocation",
								"product-pref"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all the linkers with a particular product as first preference",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": ""
						}
					},
					"response": [
						{
							"name": "Linkers with particular track as first preference example",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://huallocation-backend-urtjok3rza-wl.a.run.app/HUAllocation/product-pref/preference/Hobby groups app in companies",
									"protocol": "https",
									"host": [
										"huallocation-backend-urtjok3rza-wl",
										"a",
										"run",
										"app"
									],
									"path": [
										"HUAllocation",
										"product-pref",
										"preference",
										"Hobby groups app in companies"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "content-type",
									"value": "application/json"
								},
								{
									"key": "vary",
									"value": "Accept, Origin, Cookie"
								},
								{
									"key": "allow",
									"value": "GET, POST, HEAD, OPTIONS"
								},
								{
									"key": "x-frame-options",
									"value": "DENY"
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff"
								},
								{
									"key": "referrer-policy",
									"value": "same-origin"
								},
								{
									"key": "cross-origin-opener-policy",
									"value": "same-origin"
								},
								{
									"key": "X-Cloud-Trace-Context",
									"value": "4e67ac0c17a70107aaab3ccbbf8e2e2e"
								},
								{
									"key": "Date",
									"value": "Fri, 08 Apr 2022 05:13:08 GMT"
								},
								{
									"key": "Server",
									"value": "Google Frontend"
								},
								{
									"key": "Content-Length",
									"value": "1828"
								},
								{
									"key": "Alt-Svc",
									"value": "h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000,h3-Q050=\":443\"; ma=2592000,h3-Q046=\":443\"; ma=2592000,h3-Q043=\":443\"; ma=2592000,quic=\":443\"; ma=2592000; v=\"46,43\""
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": 10,\n        \"email\": \"bseary9\",\n        \"preference_1\": \"Hobby groups app in companies\",\n        \"preference_2\": \"Food@Workplace\",\n        \"preference_3\": \"Pod.com\"\n    },\n    {\n        \"id\": 11,\n        \"email\": \"ekenwortha\",\n        \"preference_1\": \"Hobby groups app in companies\",\n        \"preference_2\": \"Food@Workplace\",\n        \"preference_3\": \"Pod.com\"\n    },\n    {\n        \"id\": 14,\n        \"email\": \"scrosserd\",\n        \"preference_1\": \"Hobby groups app in companies\",\n        \"preference_2\": \"Digiart/Art share\",\n        \"preference_3\": \"High Court Case Database\"\n    },\n    {\n        \"id\": 37,\n        \"email\": \"ndelany10\",\n        \"preference_1\": \"Hobby groups app in companies\",\n        \"preference_2\": \"Digiart/Art share\",\n        \"preference_3\": \"Parking Slot Booking\"\n    },\n    {\n        \"id\": 44,\n        \"email\": \"sluckwell17\",\n        \"preference_1\": \"Hobby groups app in companies\",\n        \"preference_2\": \"Digiart/Art share\",\n        \"preference_3\": \"Pod.com\"\n    },\n    {\n        \"id\": 49,\n        \"email\": \"bdarrach1c\",\n        \"preference_1\": \"Hobby groups app in companies\",\n        \"preference_2\": \"Food@Workplace\",\n        \"preference_3\": \"Pod.com\"\n    },\n    {\n        \"id\": 55,\n        \"email\": \"jtrembath1i\",\n        \"preference_1\": \"Hobby groups app in companies\",\n        \"preference_2\": \"Food@Workplace\",\n        \"preference_3\": \"IPL Fantasy Game\"\n    },\n    {\n        \"id\": 65,\n        \"email\": \"jhegel1s\",\n        \"preference_1\": \"Hobby groups app in companies\",\n        \"preference_2\": \"Hashedin Projects\",\n        \"preference_3\": \"Covid seating\"\n    },\n    {\n        \"id\": 76,\n        \"email\": \"mchomicz23\",\n        \"preference_1\": \"Hobby groups app in companies\",\n        \"preference_2\": \"Hashedin Projects\",\n        \"preference_3\": \"Idea Collaborator\"\n    },\n    {\n        \"id\": 80,\n        \"email\": \"rmurrish27\",\n        \"preference_1\": \"Hobby groups app in companies\",\n        \"preference_2\": \"Food@Workplace\",\n        \"preference_3\": \"Pod.com\"\n    },\n    {\n        \"id\": 89,\n        \"email\": \"dbellison2g\",\n        \"preference_1\": \"Hobby groups app in companies\",\n        \"preference_2\": \"Food@Workplace\",\n        \"preference_3\": \"Pod.com\"\n    },\n    {\n        \"id\": 97,\n        \"email\": \"sannetts2o\",\n        \"preference_1\": \"Hobby groups app in companies\",\n        \"preference_2\": \"Parking Slot Booking\",\n        \"preference_3\": \"Pod.com\"\n    },\n    {\n        \"id\": 98,\n        \"email\": \"avince2p\",\n        \"preference_1\": \"Hobby groups app in companies\",\n        \"preference_2\": \"Digiart/Art share\",\n        \"preference_3\": \"GHOUSE\"\n    }\n]"
						}
					]
				},
				{
					"name": "Get  the products allocated to all linkers",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": ""
						}
					},
					"response": []
				},
				{
					"name": "Get the linkers allocated with a particular product",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": ""
						}
					},
					"response": [
						{
							"name": "Linker with  a particular product as preference example",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://huallocation-backend-urtjok3rza-wl.a.run.app/HUAllocation/product-allocated/product/SWIPE",
									"protocol": "https",
									"host": [
										"huallocation-backend-urtjok3rza-wl",
										"a",
										"run",
										"app"
									],
									"path": [
										"HUAllocation",
										"product-allocated",
										"product",
										"SWIPE"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "content-type",
									"value": "application/json"
								},
								{
									"key": "vary",
									"value": "Accept, Origin, Cookie"
								},
								{
									"key": "allow",
									"value": "GET, POST, HEAD, OPTIONS"
								},
								{
									"key": "x-frame-options",
									"value": "DENY"
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff"
								},
								{
									"key": "referrer-policy",
									"value": "same-origin"
								},
								{
									"key": "cross-origin-opener-policy",
									"value": "same-origin"
								},
								{
									"key": "X-Cloud-Trace-Context",
									"value": "dc894d473cbad87720902103c38a024c"
								},
								{
									"key": "Date",
									"value": "Fri, 08 Apr 2022 05:13:28 GMT"
								},
								{
									"key": "Server",
									"value": "Google Frontend"
								},
								{
									"key": "Content-Length",
									"value": "257"
								},
								{
									"key": "Alt-Svc",
									"value": "h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000,h3-Q050=\":443\"; ma=2592000,h3-Q046=\":443\"; ma=2592000,h3-Q043=\":443\"; ma=2592000,quic=\":443\"; ma=2592000; v=\"46,43\""
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": 3,\n        \"email\": \"gmuehleb\",\n        \"name\": \"Glynis Muehle\",\n        \"product\": \"SWIPE\",\n        \"islead\": \"Yes\"\n    },\n    {\n        \"id\": 51,\n        \"email\": \"dosharryo\",\n        \"name\": \"Damara O'Sharry\",\n        \"product\": \"SWIPE\",\n        \"islead\": \"No\"\n    },\n    {\n        \"id\": 97,\n        \"email\": \"nloyley1d\",\n        \"name\": \"Norris Loyley\",\n        \"product\": \"SWIPE\",\n        \"islead\": \"No\"\n    }\n]"
						}
					]
				},
				{
					"name": "Post product detail of all products",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://huallocation-backend-urtjok3rza-wl.a.run.app/HUAllocation/productdetail-upload",
							"protocol": "https",
							"host": [
								"huallocation-backend-urtjok3rza-wl",
								"a",
								"run",
								"app"
							],
							"path": [
								"HUAllocation",
								"productdetail-upload"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post product preference of a linker",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://huallocation-backend-urtjok3rza-wl.a.run.app/HUAllocation/productpref-upload",
							"protocol": "https",
							"host": [
								"huallocation-backend-urtjok3rza-wl",
								"a",
								"run",
								"app"
							],
							"path": [
								"HUAllocation",
								"productpref-upload"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product allocated based on score",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Done\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"    \"items\": {\r",
									"        \"type\": \"boolean\"\r",
									"    }\r",
									"};\r",
									"\r",
									"var message = [true, false];\r",
									"\r",
									"pm.test('Schema is valid', function () {\r",
									"    pm.expect(tv4.validate(message, \"Done\")).to.be.true;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Check datatype for string\", ()=>{\r",
									"    _.each(pm.response.json().response,(item) => {\r",
									"        pm.except(typeof item[\"message\"]).to.be.oneOf(['string']);\r",
									"    })\r",
									"})\r",
									"\r",
									"pm.test(\"Message field is not empty\", function () {\r",
									"var message= pm.response.json();\r",
									"pm.expect(message.message).not.equal(null);\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/perform-product-analysis-score",
							"host": [
								"{{url}}"
							],
							"path": [
								"perform-product-analysis-score"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product allocated based on ratings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Done\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 600ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(600);\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"    \"items\": {\r",
									"        \"type\": \"boolean\"\r",
									"    }\r",
									"};\r",
									"\r",
									"var message = [true, false];\r",
									"\r",
									"pm.test('Schema is valid', function () {\r",
									"    pm.expect(tv4.validate(message, \"Done\")).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Check datatype for string\", ()=>{\r",
									"    _.each(pm.response.json().response,(item) => {\r",
									"        pm.except(typeof item[\"message\"]).to.be.oneOf(['string']);\r",
									"    })\r",
									"})\r",
									"\r",
									"pm.test(\"Message field is not empty\", function () {\r",
									"var message= pm.response.json();\r",
									"pm.expect(message.message).not.equal(null);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/perform-product-analysis-rate",
							"host": [
								"{{url}}"
							],
							"path": [
								"perform-product-analysis-rate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product allocated based on only ratings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Done\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 600ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(600);\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"    \"items\": {\r",
									"        \"type\": \"boolean\"\r",
									"    }\r",
									"};\r",
									"\r",
									"var message = [true, false];\r",
									"\r",
									"pm.test('Schema is valid', function () {\r",
									"    pm.expect(tv4.validate(message, \"Done\")).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Check datatype for string\", ()=>{\r",
									"    _.each(pm.response.json().response,(item) => {\r",
									"        pm.except(typeof item[\"message\"]).to.be.oneOf(['string']);\r",
									"    })\r",
									"})\r",
									"\r",
									"pm.test(\"Message field is not empty\", function () {\r",
									"var message= pm.response.json();\r",
									"pm.expect(message.message).not.equal(null);\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/perform-product-analysis-only-rate",
							"host": [
								"{{url}}"
							],
							"path": [
								"perform-product-analysis-only-rate"
							]
						}
					},
					"response": []
				}
			],
			"description": "API's for product analysis and allocation .\n\nIt contains following requests:\n\nGet all section lead remarks.\n\n1.  Get section lead remarks by email\n2.  Get all product detail.\n3.  Get a single product details.\n4.  Get product details by id.\n5.  Get preferences of a linker by email.\n6.  Get all the linkers with a particular track as first preference.\n7.  Get the product allocated to all linkers.\n8.  Get all the product allocated to a linker by email.\n9.  Get all linkers with a particular track.\n10.  Post product detail.\n11.  Post product detail of all products.\n12.  Post product preference of a linker\n13.  Product allocated based on score\n14.  Product allocated based on ratrings\n15.  Product allocated based on only ratings"
		},
		{
			"name": "Track",
			"item": [
				{
					"name": "Get track results of all linkers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"grade_5\");\r",
									"\r",
									"pm.test(\"Response time is less than 3000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"});\r",
									"\r",
									"pm.test(\"Check datatype for id\", () => {\r",
									"_.each(pm.response.json().response, (item) => {\r",
									"pm.expect(typeof item[\"id\"]).to.be.oneOf(['number']);\r",
									"})\r",
									"})\r",
									"\r",
									"pm.test(\"Check datatype for string\", () => {\r",
									"_.each(pm.response.json().response, (item) => {\r",
									"pm.expect(typeof item[\"email\"]).to.be.oneOf(['string']);\r",
									"})\r",
									"})\r",
									"\r",
									"pm.test(\"Check datatype for id\", () => {\r",
									"_.each(pm.response.json().response, (item) => {\r",
									"pm.expect(typeof item[\"score_1\"]).to.be.oneOf(['number']);\r",
									"})\r",
									"})\r",
									"\r",
									"pm.test(\"Check datatype for id\", () => {\r",
									"_.each(pm.response.json().response, (item) => {\r",
									"pm.expect(typeof item[\"score_2\"]).to.be.oneOf(['number']);\r",
									"})\r",
									"})\r",
									"\r",
									"pm.test(\"Check datatype for string\", () => {\r",
									"_.each(pm.response.json().response, (item) => {\r",
									"pm.expect(typeof item[\"grade_1\"]).to.be.oneOf(['string']);\r",
									"})\r",
									"})\r",
									"\r",
									"pm.test(\"Check datatype for string\", () => {\r",
									"_.each(pm.response.json().response, (item) => {\r",
									"pm.expect(typeof item[\"grade_2\"]).to.be.oneOf(['string']);\r",
									"})\r",
									"})\r",
									"\r",
									"pm.test(\"Id field is not empty\", function () {\r",
									"var id1= pm.response.json();\r",
									"pm.expect(id1.id).not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test(\"email field is not empty\", function () {\r",
									"var email1= pm.response.json();\r",
									"pm.expect(email1.email).not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Score 1 field is not empty\", function () {\r",
									"var score_1 = pm.response.json();\r",
									"pm.expect(score_1.score).not.equal(null);\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"grade 1 field is not empty\", function () {\r",
									"var grade_1= pm.response.json();\r",
									"pm.expect(grade_1.token).not.equal(null);\r",
									"\r",
									"});\r",
									"var schema = {\r",
									"    \"items\": {\r",
									"        \"type\": \"boolean\"\r",
									"    }\r",
									"};\r",
									"\r",
									"var id = [true, false];\r",
									"var email = [true, 123];\r",
									"var score_1=[true,false];\r",
									"var grade_2=[true,123];\r",
									"\r",
									"pm.test('Schema is valid', function () {\r",
									"    pm.expect(tv4.validate(id, \"1\")).to.be.true;\r",
									"    pm.expect(tv4.validate(email, \"edorkins0\")).to.be.true;\r",
									"    pm.expect(tv4.validate(score_1, \"14.0\")).to.be.true;\r",
									"    pm.expect(tv4.validate(grade_2, \"Below\")).to.be.true;\r",
									"    pm.expect(tv4.validate(id, \"2\")).to.be.true;\r",
									"    pm.expect(tv4.validate(email, \"sturmall1\")).to.be.true;\r",
									"    pm.expect(tv4.validate(score_1, \"9.0\")).to.be.true;\r",
									"    pm.expect(tv4.validate(grade_2, \"Meets Below\")).to.be.true;\r",
									"    \r",
									"    \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/track-result",
							"host": [
								"{{url}}"
							],
							"path": [
								"track-result"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get result of a particular linker by email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"});\r",
									"\r",
									"pm.test(\"Check datatype for id\", () => {\r",
									"_.each(pm.response.json().response, (item) => {\r",
									"pm.expect(typeof item[\"id\"]).to.be.oneOf(['number']);\r",
									"})\r",
									"})\r",
									"\r",
									"pm.test(\"Check datatype for string\", () => {\r",
									"_.each(pm.response.json().response, (item) => {\r",
									"pm.expect(typeof item[\"email\"]).to.be.oneOf(['string']);\r",
									"})\r",
									"})\r",
									"\r",
									"pm.test(\"Check datatype for id\", () => {\r",
									"_.each(pm.response.json().response, (item) => {\r",
									"pm.expect(typeof item[\"score_1\"]).to.be.oneOf(['number']);\r",
									"})\r",
									"})\r",
									"\r",
									"pm.test(\"Check datatype for id\", () => {\r",
									"_.each(pm.response.json().response, (item) => {\r",
									"pm.expect(typeof item[\"score_2\"]).to.be.oneOf(['number']);\r",
									"})\r",
									"})\r",
									"\r",
									"pm.test(\"Check datatype for string\", () => {\r",
									"_.each(pm.response.json().response, (item) => {\r",
									"pm.expect(typeof item[\"grade_1\"]).to.be.oneOf(['string']);\r",
									"})\r",
									"})\r",
									"\r",
									"pm.test(\"Check datatype for string\", () => {\r",
									"_.each(pm.response.json().response, (item) => {\r",
									"pm.expect(typeof item[\"grade_2\"]).to.be.oneOf(['string']);\r",
									"})\r",
									"})\r",
									"\r",
									"pm.test(\"Id field is not empty\", function () {\r",
									"var id1= pm.response.json();\r",
									"pm.expect(id1.id).not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test(\"email field is not empty\", function () {\r",
									"var email1= pm.response.json();\r",
									"pm.expect(email1.email).not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Score 1 field is not empty\", function () {\r",
									"var score_1 = pm.response.json();\r",
									"pm.expect(score_1.score).not.equal(null);\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"grade 1 field is not empty\", function () {\r",
									"var grade_1= pm.response.json();\r",
									"pm.expect(grade_1.token).not.equal(null);\r",
									"\r",
									"});\r",
									"var schema = {\r",
									"    \"items\": {\r",
									"        \"type\": \"boolean\"\r",
									"    }\r",
									"};\r",
									"\r",
									"var id = [true, false];\r",
									"var email = [true, 123];\r",
									"var score_1=[true,false];\r",
									"var grade_2=[true,123];\r",
									"\r",
									"pm.test('Schema is valid', function () {\r",
									"    pm.expect(tv4.validate(id, \"1\")).to.be.true;\r",
									"    pm.expect(tv4.validate(email, \"edorkins0\")).to.be.true;\r",
									"    pm.expect(tv4.validate(score_1, \"14.0\")).to.be.true;\r",
									"    pm.expect(tv4.validate(grade_2, \"Below\")).to.be.true;\r",
									"    \r",
									"    \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/track-result/edorkins0",
							"host": [
								"{{url}}"
							],
							"path": [
								"track-result",
								"edorkins0"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all the track allocated to linkers",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://huallocation-backend-urtjok3rza-wl.a.run.app/HUAllocation/track-allocated",
							"protocol": "https",
							"host": [
								"huallocation-backend-urtjok3rza-wl",
								"a",
								"run",
								"app"
							],
							"path": [
								"HUAllocation",
								"track-allocated"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get track allocated to a particular linker through email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"\r",
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"});\r",
									"\r",
									"pm.test(\"Check datatype for id\", () => {\r",
									"_.each(pm.response.json().response, (item) => {\r",
									"pm.expect(typeof item[\"id\"]).to.be.oneOf(['number']);\r",
									"})\r",
									"})\r",
									"\r",
									"pm.test(\"Check datatype for string\", () => {\r",
									"_.each(pm.response.json().response, (item) => {\r",
									"pm.expect(typeof item[\"email\"]).to.be.oneOf(['string']);\r",
									"})\r",
									"})\r",
									"\r",
									"pm.test(\"Check datatype for name\", () => {\r",
									"_.each(pm.response.json().response, (item) => {\r",
									"pm.expect(typeof item[\"name\"]).to.be.oneOf(['string']);\r",
									"})\r",
									"})\r",
									"\r",
									"pm.test(\"Check datatype for assigned track\", () => {\r",
									"_.each(pm.response.json().response, (item) => {\r",
									"pm.expect(typeof item[\"assigned_track\"]).to.be.oneOf(['string']);\r",
									"})\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Id field is not empty\", function () {\r",
									"var id1= pm.response.json();\r",
									"pm.expect(id1.id).not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test(\"email field is not empty\", function () {\r",
									"var email1= pm.response.json();\r",
									"pm.expect(email1.email).not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test(\"name field is not empty\", function () {\r",
									"var name = pm.response.json();\r",
									"pm.expect(name.name).not.equal(null);\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"assigned track field is not empty\", function () {\r",
									"var assigned_track= pm.response.json();\r",
									"pm.expect(assigned_track.assigned_track).not.equal(null);\r",
									"\r",
									"});\r",
									"var schema = {\r",
									"    \"items\": {\r",
									"        \"type\": \"boolean\"\r",
									"    }\r",
									"};\r",
									"\r",
									"var id = [true, false];\r",
									"var email = [true, 123];\r",
									"var name=[true,false];\r",
									"var assigned_track=[true,123];\r",
									"\r",
									"pm.test('Schema is valid', function () {\r",
									"    pm.expect(tv4.validate(id, \"27\")).to.be.true;\r",
									"    pm.expect(tv4.validate(email, \"ceulu\")).to.be.true;\r",
									"    pm.expect(tv4.validate(name, \"Corrianne Eul\")).to.be.true;\r",
									"    pm.expect(tv4.validate(assigned_track, \"Mobile Development\")).to.be.true;\r",
									"    \r",
									"    \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/track-allocated/email/ceulu",
							"host": [
								"{{url}}"
							],
							"path": [
								"track-allocated",
								"email",
								"ceulu"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all the linkers in a particular track",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Advance Angular\");\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"});\r",
									"\r",
									"pm.test(\"Check datatype for id\", () => {\r",
									"_.each(pm.response.json().response, (item) => {\r",
									"pm.expect(typeof item[\"id\"]).to.be.oneOf(['number']);\r",
									"})\r",
									"})\r",
									"\r",
									"pm.test(\"Check datatype for string\", () => {\r",
									"_.each(pm.response.json().response, (item) => {\r",
									"pm.expect(typeof item[\"email\"]).to.be.oneOf(['string']);\r",
									"})\r",
									"})\r",
									"\r",
									"pm.test(\"Check datatype for name\", () => {\r",
									"_.each(pm.response.json().response, (item) => {\r",
									"pm.expect(typeof item[\"name\"]).to.be.oneOf(['string']);\r",
									"})\r",
									"})\r",
									"\r",
									"pm.test(\"Check datatype for assigned track\", () => {\r",
									"_.each(pm.response.json().response, (item) => {\r",
									"pm.expect(typeof item[\"assigned_track\"]).to.be.oneOf(['string']);\r",
									"})\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Id field is not empty\", function () {\r",
									"var id1= pm.response.json();\r",
									"pm.expect(id1.id).not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test(\"email field is not empty\", function () {\r",
									"var email1= pm.response.json();\r",
									"pm.expect(email1.email).not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test(\"name field is not empty\", function () {\r",
									"var name = pm.response.json();\r",
									"pm.expect(name.name).not.equal(null);\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"assigned track field is not empty\", function () {\r",
									"var assigned_track= pm.response.json();\r",
									"pm.expect(assigned_track.assigned_track).not.equal(null);\r",
									"\r",
									"});\r",
									"var schema = {\r",
									"    \"items\": {\r",
									"        \"type\": \"boolean\"\r",
									"    }\r",
									"};\r",
									"\r",
									"var id = [true, false];\r",
									"var email = [true, 123];\r",
									"var name=[true,false];\r",
									"var assigned_track=[true,123];\r",
									"\r",
									"pm.test('Schema is valid', function () {\r",
									"    pm.expect(tv4.validate(id, \"2\")).to.be.true;\r",
									"    pm.expect(tv4.validate(email, \"mjeanenet1p\")).to.be.true;\r",
									"    pm.expect(tv4.validate(name, \"Marcile Jeanenet\")).to.be.true;\r",
									"    pm.expect(tv4.validate(assigned_track, \"IOT\")).to.be.true;\r",
									"    pm.expect(tv4.validate(id, \"41\")).to.be.true;\r",
									"    pm.expect(tv4.validate(email, \"ideeley1n\")).to.be.true;\r",
									"    pm.expect(tv4.validate(name, \"Isabelita Deeley\")).to.be.true;\r",
									"    pm.expect(tv4.validate(assigned_track, \"IOT\")).to.be.true;\r",
									"    \r",
									"    \r",
									"    \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://huallocation-backend-urtjok3rza-wl.a.run.app/HUAllocation/track-allocated/track/Advance Angular",
							"protocol": "https",
							"host": [
								"huallocation-backend-urtjok3rza-wl",
								"a",
								"run",
								"app"
							],
							"path": [
								"HUAllocation",
								"track-allocated",
								"track",
								"Advance Angular"
							]
						}
					},
					"response": []
				}
			],
			"description": "API's used wile track analysis and allocation\n\nIt contains the following requests:\n\n1.  Get track results of all linkers.\n2.  Get result of a particular linker by email.\n3.  Get all the tracks allocated to linkers.\n4.  Get track allocated to a particular linker through email.\n5.  Get all the linkers in a particular track.\n6.  Post parallel track preference\n7.  Post section lead remark\n8.  Post track result\n9.  Post parallel track details\n10.  Track allocated on basis of ratings\n11.  Track allocated on basis of ratings and effort\n12.  Track allocated on basis of only ratings\n13.  Track allocated on basis of only ratings and effort\n14.  Track allocated on basis of score with effort\n15.  Track allocated on basis of score with no effort"
		}
	]
}